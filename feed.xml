<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://aaronwalker.cloud/feed.xml" rel="self" type="application/atom+xml" /><link href="https://aaronwalker.cloud/" rel="alternate" type="text/html" /><updated>2023-06-05T19:28:32+02:00</updated><id>https://aaronwalker.cloud/feed.xml</id><title type="html">aaronwalker.cloud</title><subtitle>My random cloud rants | Technology Director @base2Services | AWS Ambassador | AWS Community Leader Berlin</subtitle><author><name>Aaron Walker</name></author><entry><title type="html">Introduction to Amazon VPC Lattice - A Managed “Service Mesh” for Modernizing Applications</title><link href="https://aaronwalker.cloud/2023/06/05/aws-vpc-lattice.html" rel="alternate" type="text/html" title="Introduction to Amazon VPC Lattice - A Managed “Service Mesh” for Modernizing Applications" /><published>2023-06-05T00:00:00+02:00</published><updated>2023-06-05T00:00:00+02:00</updated><id>https://aaronwalker.cloud/2023/06/05/aws-vpc-lattice</id><content type="html" xml:base="https://aaronwalker.cloud/2023/06/05/aws-vpc-lattice.html"><![CDATA[<p>Amazon Web Services (AWS) has recently launched a new service called Amazon VPC Lattice, which is a managed service mesh that helps users modernize their applications by providing automatic management of network connectivity, traffic routing, and security between services across different VPCs and AWS accounts.</p>

<p>In this blog post, we will explore the key features of Amazon VPC Lattice and how it can help you modernize your application architecture.</p>

<h2 id="features-of-aws-vpc-lattice">Features of AWS VPC Lattice:</h2>
<hr />
<h3 id="automatic-management-of-network-connectivity-and-traffic-routing">Automatic Management of Network Connectivity and Traffic Routing</h3>

<p>Amazon VPC Lattice automatically manages network connectivity and application layer routing between services across different VPCs and AWS accounts. This means that you no longer have to manage the underlying network connectivity, frontend load balancers, or sidecar proxies next to every workload. This capability allows you to focus on your application logic and deliver applications faster.</p>

<h3 id="service-directory-and-service-network">Service Directory and Service Network</h3>

<p>Amazon VPC Lattice provides a service directory with a centralized view of the services that you own or have been shared with you through AWS Resource Access Manager (AWS RAM). Additionally, you can create a service network with a logical boundary that is used to automatically implement service discovery and connectivity. You can also apply common access and observability policies to a collection of services.</p>

<h3 id="automatic-connectivity-between-vpcs-and-accounts">Automatic Connectivity between VPCs and Accounts</h3>

<p>Amazon VPC Lattice automatically manages network connectivity between VPCs and accounts, in addition to network address translation between IPv4, IPv6, and overlapping IP addresses. This means that you no longer have to manually set up and manage complex network connectivity between different VPCs and accounts.</p>

<h3 id="advanced-traffic-management-and-application-layer-routing">Advanced Traffic Management and Application Layer Routing</h3>

<p>Amazon VPC Lattice is a fully managed application layer proxy that provides common controls to route traffic based on request characteristics. It also supports weighted routing for blue/green and canary-style deployments, which makes it easier to manage deployments and minimize downtime.</p>

<h3 id="context-specific-authentication-and-authorization">Context-Specific Authentication and Authorization</h3>

<p>Amazon VPC Lattice integrates with AWS Identity and Access Management (IAM) for service-to-service authentication and authorization, providing the same familiar authentication and authorization capabilities you use today with AWS services. This capability allows you to easily manage access to your services and ensure that only authorized services can access each other.</p>

<h3 id="compute-types">Compute Types</h3>

<p>By using Amazon VPC Lattice, you can choose from different compute types, such as instances, containers, and serverless, for a given service. This helps you modernize from a monolithic application architecture to a microservices architecture. This capability also helps improve scalability and cost efficiency.</p>

<h3 id="integrated-monitoring-and-reporting">Integrated Monitoring and Reporting</h3>

<p>AWS VPC Lattice comes with built-in monitoring and reporting tools that provide insights into your networking environment. These tools help identify potential issues before they become critical problems and enable proactive troubleshooting.</p>

<h2 id="how-amazon-vpc-lattice-is-different-from-traditional-service-mesh-products-and-tools">How Amazon VPC Lattice is Different from Traditional Service Mesh Products and Tools</h2>

<p>Traditional service mesh products and tools are typically built as open-source software that can be installed and configured on your own infrastructure. They provide features such as traffic routing, service discovery, load balancing, and observability. However, managing and scaling these service mesh tools can be challenging, and may require dedicated teams with specialized knowledge.</p>

<p>Amazon VPC Lattice, on the other hand, is a fully managed service mesh that is built on top of AWS infrastructure. It provides automatic management of network connectivity, traffic routing, and security between services across different VPCs and AWS accounts. This means that you don’t have to worry about managing the underlying infrastructure, and can focus on your application logic instead.</p>

<p>Here are some specific ways that Amazon VPC Lattice differs from traditional service mesh products and tools:</p>

<p>Fully Managed: Amazon VPC Lattice is a fully managed service that provides automatic management of network connectivity and traffic routing, so you don’t have to manage the underlying infrastructure yourself. Traditional service mesh products and tools require you to install and configure the software on your own infrastructure.</p>

<p>Integrated with AWS: Amazon VPC Lattice is built on top of AWS infrastructure and integrates with other AWS services such as IAM, AWS RAM, and AWS PrivateLink. This provides a seamless experience for managing your applications in the cloud. Traditional service mesh products and tools may require additional configuration to integrate with other cloud services.</p>

<p>Service Network: Amazon VPC Lattice provides a service network with a logical boundary that is used to automatically implement service discovery and connectivity. This makes it easy to manage your application’s network topology. Traditional service mesh products and tools may require you to configure complex networking topologies manually.</p>

<p>Advanced Traffic Management: Amazon VPC Lattice provides advanced traffic management features such as weighted routing for blue/green and canary-style deployments. This makes it easier to manage deployments and minimize downtime. Traditional service mesh products and tools may not provide these advanced traffic management features.</p>

<p>Easier to Use: Amazon VPC Lattice is designed to be easier to use than traditional service mesh products and tools. It provides a service directory with a centralized view of the services that you own or have been shared with you through AWS RAM. Additionally, you can choose from different compute types, such as instances, containers, and serverless, for a given service, which helps you modernize from a monolithic application architecture to a microservices architecture. This makes it easier to manage your applications in the cloud.</p>

<p>In conclusion, Amazon VPC Lattice empowers developers and organizations to embrace a modern, microservices-oriented approach without the burden of managing complex networking and service mesh infrastructure. By automating network connectivity, traffic routing, and security, Amazon VPC Lattice enables you to focus on innovation and rapidly deliver applications to meet evolving business needs. Take advantage of this fully managed service mesh and unlock the potential of your applications in the cloud.</p>]]></content><author><name>Aaron Walker</name></author><summary type="html"><![CDATA[Amazon Web Services (AWS) has recently launched a new service called Amazon VPC Lattice, which is a managed service mesh that helps users modernize their applications by providing automatic management of network connectivity, traffic routing, and security between services across different VPCs and AWS accounts.]]></summary></entry><entry><title type="html">Choosing Between AWS Lambda and Fargate</title><link href="https://aaronwalker.cloud/2023/01/27/lambda-or-fargate.html" rel="alternate" type="text/html" title="Choosing Between AWS Lambda and Fargate" /><published>2023-01-27T00:00:00+01:00</published><updated>2023-01-27T00:00:00+01:00</updated><id>https://aaronwalker.cloud/2023/01/27/lambda-or-fargate</id><content type="html" xml:base="https://aaronwalker.cloud/2023/01/27/lambda-or-fargate.html"><![CDATA[<p>A common question I receive frequently is when to use AWS Lambda over AWS Fargate. Both being “serverless” services, it can be challenging to determine which one is more suitable for a specific use case. Let’s dive deeper and explore the differences between these two services to help make a more informed decision.</p>

<p>AWS Lambda and Amazon Fargate are both services offered by Amazon Web Services (AWS) that allow users to run and scale code without having to manage the underlying infrastructure. While these services share some similarities, they are designed for different use cases and come with their own set of advantages and limitations.</p>

<p>AWS Lambda is a serverless computing service that allows you to run code without provisioning or managing servers. According to the AWS Lambda website, “AWS Lambda automatically scales and monitors your applications so you don’t have to. You can build serverless applications that automatically scale based on incoming request traffic. You can also use AWS Lambda to create new back-end services where compute resources are automatically triggered based on custom requests.” This makes it a great choice for event-driven, short-lived processes, such as image or video processing, and real-time stream processing.</p>

<p>On the other hand, Amazon Fargate is a fully managed container orchestration service that allows you to run and scale containers without having to manage the underlying infrastructure. According to the AWS Blog, “Amazon Fargate makes it easy to run and scale containerized applications without having to manage the underlying infrastructure. You can launch and stop containers, scale your applications, and monitor their performance using the same familiar Amazon EC2 and Amazon ECS APIs and tools you already use.” This makes it a great choice for running and scaling long-running applications that require more control over the underlying infrastructure, such as microservices and big data workloads.</p>

<p>It’s also worth noting that Lambda and Fargate can be used together as well, for example, you could use Lambda to trigger an action that then runs a containerized task on Fargate. According to the AWS Blog, “You can use AWS Lambda to process records in an Amazon Kinesis stream, detect image and video labels using Amazon Rekognition, and even run your own custom logic written in any programming language. With these capabilities, you can use AWS Lambda to build entire applications or augment the functionality of existing ones.”</p>

<p>In conclusion, when deciding between AWS Lambda and Amazon Fargate, it’s important to consider the specific requirements of your application and use case. AWS Lambda is a great choice for event-driven, short-lived processes, while Amazon Fargate is a great choice for running and scaling long-running applications that require more control over the underlying infrastructure. Additionally, these services can be used together to build even more powerful and scalable applications.</p>]]></content><author><name>Aaron Walker</name></author><summary type="html"><![CDATA[A common question I receive frequently is when to use AWS Lambda over AWS Fargate. Both being “serverless” services, it can be challenging to determine which one is more suitable for a specific use case. Let’s dive deeper and explore the differences between these two services to help make a more informed decision.]]></summary></entry><entry><title type="html">Using ChatGPT to help you write AWS Cloud Infrastructure Code</title><link href="https://aaronwalker.cloud/2022/12/16/write-aws-cloud-infra-code-using-ai.html" rel="alternate" type="text/html" title="Using ChatGPT to help you write AWS Cloud Infrastructure Code" /><published>2022-12-16T00:00:00+01:00</published><updated>2022-12-16T00:00:00+01:00</updated><id>https://aaronwalker.cloud/2022/12/16/write-aws-cloud-infra-code-using%20ai</id><content type="html" xml:base="https://aaronwalker.cloud/2022/12/16/write-aws-cloud-infra-code-using-ai.html"><![CDATA[<h1 id="using-chatgpt-to-help-you-write-aws-cloud-infrastructure-code">Using ChatGPT to help you write AWS Cloud Infrastructure Code</h1>

<p>ChatGPT, also known as the Generative Pre-trained Transformer, is a state-of-the-art natural language processing model that has been trained on a massive amount of text data. One of the many potential use cases for ChatGPT is building cloud infrastructure with Amazon Web Services (AWS) using cloud formation and chef.</p>

<p>AWS CloudFormation is a service that allows you to describe and provision your cloud infrastructure as code. You can use CloudFormation to create, update, and delete AWS resources. By using CloudFormation, you can automate the creation of resources, which can be a time-consuming task when done manually. In this post, we will show you how to use ChatGPT to generate CloudFormation templates.</p>

<p>Here is an example of how you can use ChatGPT to generate a CloudFormation template that creates an S3 bucket:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">openai</span>

<span class="c1"># Authenticate with OpenAI
</span><span class="n">openai</span><span class="p">.</span><span class="n">api_key</span> <span class="o">=</span> <span class="sh">"</span><span class="s">YOUR_API_KEY</span><span class="sh">"</span>

<span class="c1"># Define the prompt for ChatGPT
</span><span class="n">prompt</span> <span class="o">=</span> <span class="sh">'</span><span class="s">generate a cloud formation template that creates an S3 bucket</span><span class="sh">'</span>

<span class="c1"># Call the OpenAI API
</span><span class="n">response</span> <span class="o">=</span> <span class="n">openai</span><span class="p">.</span><span class="n">Completion</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span>
    <span class="n">engine</span><span class="o">=</span><span class="sh">'</span><span class="s">text-davinci-002</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">prompt</span><span class="o">=</span><span class="n">prompt</span>
<span class="p">)</span>

<span class="c1"># Print the generated CloudFormation template
</span><span class="nf">print</span><span class="p">(</span><span class="n">response</span><span class="p">[</span><span class="sh">'</span><span class="s">choices</span><span class="sh">'</span><span class="p">][</span><span class="mi">0</span><span class="p">][</span><span class="sh">'</span><span class="s">text</span><span class="sh">'</span><span class="p">])</span>
</code></pre></div></div>

<p>Here is an example of what the output of the above code might look like:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">---</span>
<span class="na">AWSTemplateFormatVersion</span><span class="pi">:</span> <span class="s1">'</span><span class="s">2010-09-09'</span>
<span class="na">Resources</span><span class="pi">:</span>
  <span class="na">MyS3Bucket</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::S3::Bucket</span>
    <span class="na">Properties</span><span class="pi">:</span>
      <span class="na">BucketName</span><span class="pi">:</span> <span class="s">my-s3-bucket</span>
</code></pre></div></div>

<p>As you can see, ChatGPT has generated a CloudFormation template that creates an S3 bucket called “my-s3-bucket”.</p>

<p>In addition to CloudFormation, you can also use ChatGPT to generate Chef scripts to provision and configure your AWS resources. Chef is a configuration management tool that allows you to automate the deployment and management of your infrastructure.</p>

<p>Here is an example of how you can use ChatGPT to generate a Chef script that installs and configures the Apache web server on an EC2 instance:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>import openai

# Authenticate with OpenAI
openai.api_key = "YOUR_API_KEY"

# Define the prompt for ChatGPT
prompt = 'generate a chef script that installs and configures the Apache web server on an EC2 instance'

# Call the OpenAI API
response = openai.Completion.create(
    engine='text-davinci-002',
    prompt=prompt
)

# Print the generated Chef script
print(response['choices'][0]['text'])
</code></pre></div></div>

<p>Here is an example of what the output of the above code might look like:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">package</span> <span class="s1">'httpd'</span>

<span class="n">service</span> <span class="s1">'httpd'</span> <span class="k">do</span>
  <span class="n">action</span> <span class="p">[</span><span class="ss">:enable</span><span class="p">,</span> <span class="ss">:start</span><span class="p">]</span>
<span class="k">end</span>

<span class="n">template</span> <span class="s1">'/etc/httpd/conf/httpd.conf'</span> <span class="k">do</span>
  <span class="n">source</span> <span class="s1">'httpd.conf.erb'</span>
  <span class="n">owner</span> <span class="s1">'root'</span>
  <span class="n">group</span> <span class="s1">'root'</span>
  <span class="n">mode</span> <span class="s1">'0644'</span>
<span class="k">end</span>
</code></pre></div></div>

<p>As you can see, ChatGPT has generated a Chef script that installs and configures the Apache web</p>

<p>In conclusion, ChatGTP is a powerful tool that can greatly benefit organizations looking to automate their AWS Cloud infrastructure code generation. Its user-friendly interface and natural language processing capabilities make it easy for even non-technical users to create complex infrastructure code with minimal effort. Additionally, ChatGTP’s ability to generate both CloudFormation and Terraform code allows organizations to choose the tool that best suits their needs. The time and cost savings achieved by using ChatGTP can be significant, allowing organizations to focus on more important tasks and achieve their business goals faster. Overall, ChatGTP is a valuable tool that can help organizations to efficiently and effectively manage their AWS Cloud infrastructure.</p>]]></content><author><name>Aaron Walker</name></author><summary type="html"><![CDATA[Using ChatGPT to help you write AWS Cloud Infrastructure Code]]></summary></entry><entry><title type="html">Using Hotwire in a Quarkus Application deployed to Lambda</title><link href="https://aaronwalker.cloud/2021/02/15/hotwire-lambda.html" rel="alternate" type="text/html" title="Using Hotwire in a Quarkus Application deployed to Lambda" /><published>2021-02-15T13:00:00+01:00</published><updated>2021-02-15T13:00:00+01:00</updated><id>https://aaronwalker.cloud/2021/02/15/hotwire-lambda</id><content type="html" xml:base="https://aaronwalker.cloud/2021/02/15/hotwire-lambda.html"><![CDATA[<h1 id="using-hotwire-in-a-quarkus-application-deployed-to-lambda">Using Hotwire in a Quarkus Application deployed to Lambda</h1>

<p>In a previous post I showed <a href="/2020/12/04/quarkus-lambda-containers.html">How to Deploy a Quarkus Lambda Application using Lambda Containers</a></p>

<p>In this post I’m going to build on that example and show how you can use Hotwire in Quarkus.</p>

<h2 id="what-is-hotwire">What is Hotwire</h2>

<p><a href="https://hotwire.dev/">Hotwire</a> is a different approach to building webapps without stabbing your eye out with a lot of JavaScript. It sends HTML over the wire instead of JSON. This tends to make for faster first-load pages. Server side rendering is seeing a bit of a <a href="https://daily.dev/posts/server-side-rendering-renaissance">renascence</a></p>

<h2 id="tldr">TL;DR</h2>
<p>The code for this demo is available on GitHub https://github.com/base2Services/quarkus-lambda-container-demo/tree/hotwire on the hotwire branch</p>

<h2 id="prerequisites">Prerequisites</h2>
<p>To complete this guide, you need:</p>

<ul>
  <li>Have the completed the setup for the <a href="/2020/12/04/quarkus-lambda-containers.html">How to Deploy a Quarkus Lambda Application using Lambda Containers</a> post</li>
</ul>

<p>So time to Hotwire lambda!!!!!</p>

<h2 id="create-a-root-resource-to-serve-the-initial-page">Create a root resource to serve the initial page</h2>]]></content><author><name>Aaron Walker</name></author><summary type="html"><![CDATA[Using Hotwire in a Quarkus Application deployed to Lambda]]></summary></entry><entry><title type="html">How to Deploy a Quarkus Lambda Application using Lambda Containers</title><link href="https://aaronwalker.cloud/2020/12/04/quarkus-lambda-containers.html" rel="alternate" type="text/html" title="How to Deploy a Quarkus Lambda Application using Lambda Containers" /><published>2020-12-04T13:00:00+01:00</published><updated>2020-12-04T13:00:00+01:00</updated><id>https://aaronwalker.cloud/2020/12/04/quarkus-lambda-containers</id><content type="html" xml:base="https://aaronwalker.cloud/2020/12/04/quarkus-lambda-containers.html"><![CDATA[<h1 id="how-to-deploy-a-quarkus-lambda-application-using-lambda-containers">How to Deploy a Quarkus Lambda Application using Lambda Containers</h1>

<p>At re:Invent 2020 Amazon announced support for deploying and running containers directly to Lambda. Here is a link to the blog post for the announcement <a href="https://aws.amazon.com/blogs/aws/new-for-aws-lambda-container-image-support/">https://aws.amazon.com/blogs/aws/new-for-aws-lambda-container-image-support/</a>.</p>

<p>Recently, I’ve been messing around with <a href="https://quarkus.io">Quarkus</a> which is a relatively new Java framework for building Apps and already has a pretty impressive eco-system.</p>

<p>This demo shows how you can package a Quarkus Lambda App using the new <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-images.html">Lambda containers</a> support. I basically used the <a href="https://quarkus.io/guides/amazon-lambd">Quarkus - Amazon Lambda</a> guide as the basis for this demo.</p>

<h2 id="tldr">TL;DR</h2>
<p>The code for this demo is available on GitHub <a href="https://github.com/base2Services/quarkus-lambda-container-demo">https://github.com/base2Services/quarkus-lambda-container-demo</a></p>

<h2 id="prerequisites">Prerequisites</h2>
<p>To complete this guide, you need:</p>

<ul>
  <li>less than 30 minutes</li>
  <li>JDK 11 (AWS requires JDK 1.8 or 11)</li>
  <li>Apache Maven 3.6.2+</li>
  <li>An Amazon AWS account</li>
  <li>AWS CLI</li>
  <li>Docker</li>
</ul>

<p>So lets get started.</p>

<h2 id="creating-the-maven-deployment-project">Creating the Maven Deployment Project</h2>

<p>First, we are going to create a basic Quarkus Lambda app using the Maven archetype.</p>

<p>These steps are taken from the <a href="https://quarkus.io/guides/amazon-lambda#creating-the-maven-deployment-project">Quarkus Lambda guide</a>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mvn archetype:generate <span class="se">\</span>
       <span class="nt">-DarchetypeGroupId</span><span class="o">=</span>io.quarkus <span class="se">\</span>
       <span class="nt">-DarchetypeArtifactId</span><span class="o">=</span>quarkus-amazon-lambda-archetype <span class="se">\</span>
       <span class="nt">-DarchetypeVersion</span><span class="o">=</span>1.10.2.Final
</code></pre></div></div>

<p>This will have created a standard Quarkus Lambda app in a directory based on Maven artifactId you entered. I will use <code class="language-plaintext highlighter-rouge">quarkus-lambda-demo</code> for the rest of the guide.</p>

<p>This generates a simple Quarkus Lambda application with a Test Lambda handler.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.base2services</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.inject.Named</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.amazonaws.services.lambda.runtime.Context</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.amazonaws.services.lambda.runtime.RequestHandler</span><span class="o">;</span>

<span class="nd">@Named</span><span class="o">(</span><span class="s">"test"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestLambda</span> <span class="kd">implements</span> <span class="nc">RequestHandler</span><span class="o">&lt;</span><span class="nc">InputObject</span><span class="o">,</span> <span class="nc">OutputObject</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="nd">@Inject</span>
    <span class="nc">ProcessingService</span> <span class="n">service</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">OutputObject</span> <span class="nf">handleRequest</span><span class="o">(</span><span class="nc">InputObject</span> <span class="n">input</span><span class="o">,</span> <span class="nc">Context</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">service</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">input</span><span class="o">).</span><span class="na">setRequestId</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getAwsRequestId</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="add-the-aws-lambda-runtime-emulator-dependency">Add the AWS Lambda Runtime Emulator Dependency</h3>

<p>Add the following dependency to the maven pom dependencies.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>....
        <span class="nt">&lt;dependency&gt;</span>
            <span class="nt">&lt;groupId&gt;</span>com.amazonaws<span class="nt">&lt;/groupId&gt;</span>
            <span class="nt">&lt;artifactId&gt;</span>aws-lambda-java-runtime-interface-client<span class="nt">&lt;/artifactId&gt;</span>
            <span class="nt">&lt;version&gt;</span>1.0.0<span class="nt">&lt;/version&gt;</span>
        <span class="nt">&lt;/dependency&gt;</span>
....
</code></pre></div></div>

<h2 id="build-the-demo">Build the demo</h2>

<p>In the quarkus-lambda-demo run Maven.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>mvn clean <span class="nb">install</span>
...
INFO] <span class="nt">---</span> maven-install-plugin:2.4:install <span class="o">(</span>default-install<span class="o">)</span> @ quarkus-lambda-demo <span class="nt">---</span>
<span class="o">[</span>INFO] Installing /Users/aaronwalker/Workspaces/aaronwalker/quarkus-lambda-container-demo/quarkus-lambda-demo/target/quarkus-lambda-demo-1.0-SNAPSHOT.jar to /Users/aaronwalker/.m2/repository/com/base2services/quarkus-lambda-demo/1.0-SNAPSHOT/quarkus-lambda-demo-1.0-SNAPSHOT.jar
<span class="o">[</span>INFO] Installing /Users/aaronwalker/Workspaces/aaronwalker/quarkus-lambda-container-demo/quarkus-lambda-demo/pom.xml to /Users/aaronwalker/.m2/repository/com/base2services/quarkus-lambda-demo/1.0-SNAPSHOT/quarkus-lambda-demo-1.0-SNAPSHOT.pom
<span class="o">[</span>INFO] <span class="nt">------------------------------------------------------------------------</span>
<span class="o">[</span>INFO] BUILD SUCCESS
<span class="o">[</span>INFO] <span class="nt">------------------------------------------------------------------------</span>
<span class="o">[</span>INFO] Total <span class="nb">time</span>:  13.732 s
<span class="o">[</span>INFO] Finished at: 2020-12-03T15:10:39+01:00
</code></pre></div></div>

<p>This will create the required artifacts in the target directory</p>

<h2 id="lambda-function">Lambda Function</h2>

<p>The quarkus-lambda-demo project has by default configured the test handler in the <code class="language-plaintext highlighter-rouge">quarkus-lambda-demo/src/main/resources/application.properties/</code> and we will use this handler for the demo.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>quarkus.lambda.handler=test
</code></pre></div></div>

<h2 id="building-the-dockerfile">Building the Dockerfile</h2>

<p>Create a Dockerfile in the quarkus-lambda-container-demo using the <code class="language-plaintext highlighter-rouge">public.ecr.aws/lambda/java:8.al2</code> Lambda java8 Amazon Linux 2 runtime container as the base image.</p>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># (1)</span>
<span class="k">FROM</span><span class="s">  public.ecr.aws/lambda/java:8.al2</span>

<span class="k">ARG</span><span class="s"> APP_NAME=quarkus-lambda-demo</span>
<span class="k">ARG</span><span class="s"> APP_VERSION=1.0-SNAPSHOT</span>

<span class="c"># (2) Copies artifacts into /function directory</span>
<span class="k">ADD</span><span class="s"> ${APP_NAME}/target/${APP_NAME}-${APP_VERSION}-runner.jar /var/task/lib/${APP_NAME}.jar</span>
<span class="k">ADD</span><span class="s"> ${APP_NAME}/target/lib/  /var/task/lib/</span>

<span class="c"># (3) Setting the command to the Quarkus lambda handler</span>
<span class="k">CMD</span><span class="s"> ["io.quarkus.amazon.lambda.runtime.QuarkusStreamHandler::handleRequest"]</span>

</code></pre></div></div>
<p>1) Details about the Lambda container images can be found at <a href="https://docs.aws.amazon.com/lambda/latest/dg/images-create.html">https://docs.aws.amazon.com/lambda/latest/dg/images-create.html</a>.</p>

<p>2) Copies the runner and it’s dependencies into the default WORKDIR which is /var/task.</p>

<p>3) Overrides the CMD using the default Quarkus Lambda handler.</p>

<h3 id="then-build-the-docker-image">Then build the Docker image</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker build <span class="nt">-t</span> quarkus/lambda-demo <span class="nb">.</span>
....
Successfully built 09666b8a56b0
Successfully tagged quarkus/lambda-demo:latest
</code></pre></div></div>

<h3 id="testing-local-using-docker">Testing local using docker</h3>

<p>You can now use this image to test the Lambda execution locally using:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker run <span class="nt">--rm</span> <span class="nt">-it</span> <span class="nt">-p</span> 9000:8080 quarkus/lambda-demo:latest
....
INFO[0000] <span class="nb">exec</span> <span class="s1">'/var/runtime/bootstrap'</span> <span class="o">(</span><span class="nv">cwd</span><span class="o">=</span>/var/task, <span class="nv">handler</span><span class="o">=)</span>
....
</code></pre></div></div>

<p>This starts the AWS Lambda runtime emulator and a web server listening locally on port 9000. You can invoke the test Lambda handler using curl.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-XPOST</span> <span class="s2">"http://localhost:9000/2015-03-31/functions/function/invocations"</span> <span class="nt">-d</span> <span class="s1">'{"greeting":"herzlich willkommen", "name":"aaron"}'</span>
....
<span class="o">{</span><span class="s2">"result"</span>:<span class="s2">"herzlich willkommen aaron"</span>,<span class="s2">"requestId"</span>:<span class="s2">"d8a48f84-a166-429e-a8ec-d8bea2e7087c"</span><span class="o">}</span>
</code></pre></div></div>

<h2 id="push-the-container-to-ecr">Push the container to ECR</h2>

<p>In order to be able to create a Lambda function from our container image we need to push it to a registry. I will use ECR in the guide.</p>

<p><strong><em>Assumes you have valid AWS credentials configured</em></strong></p>

<h3 id="create-the-ecr-registry">Create the ECR registry</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>aws ecr create-repository <span class="nt">--repository-name</span> quarkus/lambda-demo <span class="nt">--region</span> eu-central-1
....
<span class="o">{</span>
    <span class="s2">"repository"</span>: <span class="o">{</span>
        <span class="s2">"repositoryArn"</span>: <span class="s2">"arn:aws:ecr:eu-central-1:&lt;aws-accountid&gt;:repository/quarkus/lambda-demo"</span>,
        <span class="s2">"registryId"</span>: <span class="s2">"&lt;aws-accountid&gt;"</span>,
        <span class="s2">"repositoryName"</span>: <span class="s2">"quarkus/lambda-demo"</span>,
        <span class="s2">"repositoryUri"</span>: <span class="s2">"&lt;aws-accountid&gt;.dkr.ecr.eu-central-1.amazonaws.com/quarkus/lambda-demo"</span>,
        <span class="s2">"createdAt"</span>: <span class="s2">"2020-12-03T16:10:37+01:00"</span>,
        <span class="s2">"imageTagMutability"</span>: <span class="s2">"MUTABLE"</span>,
        <span class="s2">"imageScanningConfiguration"</span>: <span class="o">{</span>
            <span class="s2">"scanOnPush"</span>: <span class="nb">false</span>
        <span class="o">}</span>,
        <span class="s2">"encryptionConfiguration"</span>: <span class="o">{</span>
            <span class="s2">"encryptionType"</span>: <span class="s2">"AES256"</span>
        <span class="o">}</span>
    
</code></pre></div></div>

<h3 id="tag-and-push-the-container-image-to-ecr">Tag and push the container image to ECR</h3>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>aws ecr get-login-password <span class="nt">--region</span> eu-central-1 | docker login <span class="nt">--username</span> AWS <span class="nt">--password-stdin</span> &lt;aws-accountid&gt;.dkr.ecr.eu-central-1.amazonaws.com
<span class="nv">$ </span>docker tag quarkus/lambda-demo  &lt;aws-accountid&gt;.dkr.ecr.eu-central-1.amazonaws.com/quarkus/lambda-demo
<span class="nv">$ </span>docker push &lt;aws-accountid&gt;.dkr.ecr.eu-central-1.amazonaws.com/quarkus/lambda-demo
....
The push refers to repository <span class="o">[</span>&lt;aws-accountid&gt;.dkr.ecr.eu-central-1.amazonaws.com/quarkus/lambda-demo]
</code></pre></div></div>

<h3 id="create-the-lambda-function">Create the Lambda function</h3>

<p>Create a SAM template to deploy the function.</p>

<p><strong>sam.container.yaml</strong></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">AWSTemplateFormatVersion</span><span class="pi">:</span> <span class="s1">'</span><span class="s">2010-09-09'</span>
<span class="na">Transform</span><span class="pi">:</span> <span class="s">AWS::Serverless-2016-10-31</span>
<span class="na">Description</span><span class="pi">:</span> <span class="s">AWS Serverless Quarkus - quarkus-lambda-demo-1.0-SNAPSHOT</span>

<span class="na">Parameters</span><span class="pi">:</span>
  <span class="na">ImageUri</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">String</span>

<span class="na">Resources</span><span class="pi">:</span>
  <span class="na">QuarkusLambdaDemo</span><span class="pi">:</span>
    <span class="na">Type</span><span class="pi">:</span> <span class="s">AWS::Serverless::Function</span>
    <span class="na">Properties</span><span class="pi">:</span>
      <span class="na">PackageType</span><span class="pi">:</span> <span class="s">Image</span>
      <span class="na">ImageUri</span><span class="pi">:</span> <span class="kt">!Ref</span> <span class="s">ImageUri</span>
      <span class="na">MemorySize</span><span class="pi">:</span> <span class="m">256</span>
      <span class="na">Timeout</span><span class="pi">:</span> <span class="m">15</span>
      <span class="na">Policies</span><span class="pi">:</span> <span class="s">AWSLambdaBasicExecutionRole</span>

<span class="na">Outputs</span><span class="pi">:</span>
  <span class="na">Function</span><span class="pi">:</span>
    <span class="na">Value</span><span class="pi">:</span> <span class="kt">!Ref</span> <span class="s">QuarkusLambdaDemo</span>
</code></pre></div></div>

<p>Now deploy the template.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">AWS_REGION</span><span class="o">=</span>eu-central-1
<span class="nv">AWS_ACCOUNT_ID</span><span class="o">=</span>xxxxxx
<span class="nv">$ </span>aws cloudformation deploy <span class="se">\</span>
  <span class="nt">--stack-name</span> quarkus-lambda-demo <span class="se">\</span>
  <span class="nt">--template-file</span> sam.container.yaml <span class="se">\</span>
  <span class="nt">--parameter-overrides</span> <span class="nv">ImageUri</span><span class="o">=</span><span class="k">${</span><span class="nv">AWS_ACCOUNT_ID</span><span class="k">}</span>.dkr.ecr.<span class="k">${</span><span class="nv">AWS_REGION</span><span class="k">}</span>.amazonaws.com/quarkus/lambda-demo:latest <span class="se">\</span>
  <span class="nt">--capabilities</span> CAPABILITY_IAM <span class="se">\</span>
  <span class="nt">--region</span> <span class="k">${</span><span class="nv">AWS_REGION</span><span class="k">}</span>
</code></pre></div></div>

<p>Now invoke the function.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>aws lambda invoke <span class="se">\</span>
    <span class="nt">--cli-binary-format</span> raw-in-base64-out <span class="se">\</span>
    <span class="nt">--function-name</span> QuarkusLambdaDemo <span class="se">\</span>
    <span class="nt">--payload</span> <span class="s1">'{"greeting":"herzlich willkommen", "name":"aaron"}'</span> <span class="se">\</span>
    <span class="nt">--region</span> <span class="k">${</span><span class="nv">AWS_REGION</span><span class="k">}</span>
    out.json

<span class="o">{</span>
    <span class="s2">"StatusCode"</span>: 200,
    <span class="s2">"ExecutedVersion"</span>: <span class="s2">"</span><span class="nv">$LATEST</span><span class="s2">"</span>
<span class="o">}</span>

<span class="nv">$ </span><span class="nb">cat </span>out.json
<span class="o">{</span><span class="s2">"result"</span>:<span class="s2">"herzlich willkommen aaron"</span>,<span class="s2">"requestId"</span>:<span class="s2">"02d6569d-0452-4ed7-bdbe-7e860a8592d8"</span><span class="o">}</span>
</code></pre></div></div>

<h2 id="summary">Summary</h2>

<p>Without much modification it was possible to create a simple Quarkus Lambda App and package it as a container image. Quarkus gives you the ability to run the app locally. But by running it in the container, it gives you the same environment that the app will run in when deployed to Lambda. Another big advantage of using a container is that you aren’t restricted by the Lambda zip file size limit.</p>

<p>Follow me on <a href="https://twitter.com/aaronwalker">Twitter</a> for regular updates and my random thoughts on various topics. If you have questions or remarks, or would just like to get in touch, you can also find me on <a href="https://www.linkedin.com/in/aaronpwalker/">LinkedIn</a>.</p>]]></content><author><name>Aaron Walker</name></author><summary type="html"><![CDATA[How to Deploy a Quarkus Lambda Application using Lambda Containers]]></summary></entry><entry><title type="html">Where have you been……</title><link href="https://aaronwalker.cloud/2020/10/02/where-have-you-been.html" rel="alternate" type="text/html" title="Where have you been……" /><published>2020-10-02T16:00:00+02:00</published><updated>2020-10-02T16:00:00+02:00</updated><id>https://aaronwalker.cloud/2020/10/02/where-have-you-been</id><content type="html" xml:base="https://aaronwalker.cloud/2020/10/02/where-have-you-been.html"><![CDATA[<p>I haven’t updated my personal blog for pretty much 9 years to the day so I thought I give it a bit of a reboot. I will use this post to collect together some of the things I’ve been done over the last 9 years. Really just for my own reference ;)</p>

<h2 id="talks">Talks</h2>

<ul>
  <li>
    <p><a href="https://www.slideshare.net/aaronpwalker/enabling-yourdev-opsculturewith-aws">Enabling your DevOps culture with AWS</a> - AWS User Group Sydney - Dec 4, 2013</p>
  </li>
  <li>
    <p><a href="https://www.slideshare.net/aaronpwalker/berlin-devops-meetup-20180712">Start Building CI/CD as Code The 7 Lessons Learnt from Deploying and Managing 100s of CI Environments</a> - Berlin DevOps Meetup - Jul 7, 2018</p>
  </li>
  <li>
    <p><a href="https://www.slideshare.net/aaronpwalker/meetup-aws-berlin-july-2018-youre-writing-way-too-much-cloudformation">You’re writing WAY too much CloudFormation</a> - Berlin AWS User Group - Jul 2018</p>
  </li>
  <li>
    <p><a href="https://www.slideshare.net/aaronpwalker/meetup-aws-berlin-october-2018-account-management-and-aws-organizations">Account Management and AWS Organizations</a> - Berlin AWS User Group - Oct 2018</p>
  </li>
  <li>
    <p><a href="https://www.youtube.com/watch?v=kbWeS-2LBo8">Reusable Serverless CI/CD pipelines with Jenkins</a> - Berlin CI/CD Meetup - Jan 2019</p>
  </li>
  <li>
    <p><a href="https://www.slideshare.net/aaronpwalker/doyoureallyknowwhatis-goingoninyourawsaccounts">Do you REALLY know what is going on in your AWS Accounts?</a> - AWS Community Day Germany 2019</p>
  </li>
</ul>

<h2 id="berlin-aws-community">Berlin AWS Community</h2>

<p>Since moving to Berlin I taken a active role in the <a href="https://www.meetup.com/berlinawsug">Berlin AWS User Group</a>. The community here is awesome and are very welcoming. We have been pretty luck to get some great speakers. Recently we moved to doing virtual meetups which has opened up the opportunity to attract international speakers and expand our audience outside Berlin. <a href="https://www.meetup.com/berlinawsug/events/273280754/">Septembers meetup</a> was a fantastic start 2 great presentations.</p>]]></content><author><name>Aaron Walker</name></author><summary type="html"><![CDATA[I haven’t updated my personal blog for pretty much 9 years to the day so I thought I give it a bit of a reboot. I will use this post to collect together some of the things I’ve been done over the last 9 years. Really just for my own reference ;)]]></summary></entry><entry><title type="html">JavaOne 2011 JEE Behave Talk Sides</title><link href="https://aaronwalker.cloud/2011/10/04/javaone2011-jee-behave-talk.html" rel="alternate" type="text/html" title="JavaOne 2011 JEE Behave Talk Sides" /><published>2011-10-04T08:00:00+02:00</published><updated>2011-10-04T08:00:00+02:00</updated><id>https://aaronwalker.cloud/2011/10/04/javaone2011-jee-behave-talk</id><content type="html" xml:base="https://aaronwalker.cloud/2011/10/04/javaone2011-jee-behave-talk.html"><![CDATA[<p>Here are the slides from my JavaOne 2011 session</p>

<p>Java EE Behave!: Behavior-Driven Development with Java EE</p>

<h3 id="abtract">Abtract</h3>

<p>Behavior-driven development (BDD) is an evolution of test-driven development (TDD). It shifts the vocabulary from being test-based to behavior-based and positions itself as a design philosophy. JBehave is a Java framework for BDD, and this session explores how to write integration tests for your Java EE apps with JBehave. It also demonstrates how to leverage the Context and Dependency Injection (CDI) APIs to implement your tests.</p>

<p>This session is a must-see for all Java EE developers who want a better way to write integration tests aligned with the intended behavior.</p>

<h3 id="demo-code">Demo Code</h3>

<p>The code from the demo is up on <a href="https://github.com/aaronwalker/JavaOne2011">github</a></p>

<div style="width:595px" id="__ss_9564605"> <strong style="display:block;margin:12px 0 4px"><a href="http://www.slideshare.net/aaronpwalker/24421-walker" title="Java EE Behave!!!!" target="_blank">Java EE Behave!!!!</a></strong> <iframe src="http://www.slideshare.net/slideshow/embed_code/9564605" width="595" height="497" frameborder="0" marginwidth="0" marginheight="0" scrolling="no"></iframe> <div style="padding:5px 0 12px"> View more <a href="http://www.slideshare.net/" target="_blank">presentations</a> from <a href="http://www.slideshare.net/aaronpwalker" target="_blank">Aaron Walker</a> </div> </div>]]></content><author><name>Aaron Walker</name></author><summary type="html"><![CDATA[Here are the slides from my JavaOne 2011 session]]></summary></entry><entry><title type="html">Migrated from blogger to github pages</title><link href="https://aaronwalker.cloud/2011/08/08/blog-migration-to-github.html" rel="alternate" type="text/html" title="Migrated from blogger to github pages" /><published>2011-08-08T08:55:00+02:00</published><updated>2011-08-08T08:55:00+02:00</updated><id>https://aaronwalker.cloud/2011/08/08/blog-migration-to-github</id><content type="html" xml:base="https://aaronwalker.cloud/2011/08/08/blog-migration-to-github.html"><![CDATA[<p>A while back when I was setting up the project site for <a href="http://jentrata.org">jentrata.org</a> I started looking around for site hosting options and found <a href="http://pages.github.com/">github pages</a> and since jentrata was already using github for source code hosting it made sense to use it (and it seems to be what all the cool kids are using).</p>

<p>In my research of github pages I found a few blog posts on migrating which were helpful</p>

<ul>
  <li>
    <p><a href="http://www.alexrothenberg.com/2011/01/27/moved-blog-to-jekyll-and-github-pages.html">Moved Blog to Jekyll and GitHub Pages</a></p>
  </li>
  <li>
    <p><a href="https://github.com/mojombo/jekyll/wiki/Sites">List of sites using github pages</a></p>
  </li>
</ul>

<p>I am kind of digging <a href="https://github.com/mojombo/jekyll">jekyll</a> the scripting language behind github pages it’s pretty simple but quite powerful but a lot of the extensions don’t work with github. Which I guess is understandable since it lets you run arbitrary ruby code.</p>

<p>I really hated the blogger interface and it made a good excuse not to blog :). Also I like the idea of treating my blog like code.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:aaronwalker/aaronwalker.github.com.git
cd aaronwalker.github.com.git
vim _posts/yyyy-mm-dd-new-post.md
write some random crap that probably nobody will read :)
git add _posts/yyyy-mm-dd-new-post.md
git commit -m 'new post'
git push origin master
done
</code></pre></div></div>

<p>I think this lowers the barrier for me…</p>

<p>I’ll put together a more technical post on how I did the migration….</p>

<p>Let git it on!!!! (oh god that’s bad, so very bad)</p>]]></content><author><name>Aaron Walker</name></author><summary type="html"><![CDATA[A while back when I was setting up the project site for jentrata.org I started looking around for site hosting options and found github pages and since jentrata was already using github for source code hosting it made sense to use it (and it seems to be what all the cool kids are using).]]></summary></entry><entry><title type="html">You’ve got Cucumber in my Java….and it tastes great!!!</title><link href="https://aaronwalker.cloud/2010/11/25/osdc-talk-cucumber-java.html" rel="alternate" type="text/html" title="You’ve got Cucumber in my Java….and it tastes great!!!" /><published>2010-11-25T09:19:00+01:00</published><updated>2010-11-25T09:19:00+01:00</updated><id>https://aaronwalker.cloud/2010/11/25/osdc-talk-cucumber-java</id><content type="html" xml:base="https://aaronwalker.cloud/2010/11/25/osdc-talk-cucumber-java.html"><![CDATA[<p>This was one of the talks I gave at <a href="https://web.archive.org/web/20110912034307/http://2010.osdc.com.au/proposal/50/youve-got-cucumber-my-javaand-it-tastes-great">OSDC-2010</a></p>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/hKBPxVEbOHX1RA" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen=""> </iframe>
<div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/aaronpwalker/osdc-cucumberjava" title="OSDC 2010 - You&#x27;ve Got Cucumber in my Java and it Tastes Great" target="_blank">OSDC 2010 - You&#x27;ve Got Cucumber in my Java and it Tastes Great</a> </strong> from <strong><a href="https://www.slideshare.net/aaronpwalker" target="_blank">Aaron Walker</a></strong> </div>]]></content><author><name>Aaron Walker</name></author><summary type="html"><![CDATA[This was one of the talks I gave at OSDC-2010]]></summary></entry><entry><title type="html">Database Full-text Search….making it not suck</title><link href="https://aaronwalker.cloud/2010/11/24/osdc-talk-hibernate-search.html" rel="alternate" type="text/html" title="Database Full-text Search….making it not suck" /><published>2010-11-24T00:00:00+01:00</published><updated>2010-11-24T00:00:00+01:00</updated><id>https://aaronwalker.cloud/2010/11/24/osdc-talk-hibernate-search</id><content type="html" xml:base="https://aaronwalker.cloud/2010/11/24/osdc-talk-hibernate-search.html"><![CDATA[<p>This was one of the talks I gave at <a href="https://web.archive.org/web/20111016090657/http://2010.osdc.com.au/proposal/51/database-full-text-searchmaking-it-not-suck">OSDC-2010</a></p>

<iframe src="//www.slideshare.net/slideshow/embed_code/key/1Hea2MxOynzTg" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen=""> </iframe>
<div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/aaronpwalker/osdc2010-database-fulltext-search-making-it-not-suck" title="OSDC-2010 Database Full-text Search.... making it not suck" target="_blank">OSDC-2010 Database Full-text Search.... making it not suck</a> </strong> from <strong><a href="https://www.slideshare.net/aaronpwalker" target="_blank">Aaron Walker</a></strong> </div>]]></content><author><name>Aaron Walker</name></author><summary type="html"><![CDATA[This was one of the talks I gave at OSDC-2010]]></summary></entry></feed>